<?php
/*
 +---------------------------------------------------------------------------+
 | Copyright (C) 2009 Openflows, Inc. + Blue Bag. All rights reserved.       |
 |                                                                           |
 | This work is published under the GNU AGPLv3 license without any           |
 | warranty. For full license and copyright information, see                 |
 | https://www.gnu.org/licenses/agpl-3.0.html                                |
 +---------------------------------------------------------------------------+
 */

function inventory_item_operator_history_views_api() {
  return array(
	       'api' => 3,
	       'path' =>
	       drupal_get_path('module',
			       'inventory_item_operator_history').'/inc'
	       );
}

/*
 * Implementation of hook_form_alter()
 */

function inventory_item_operator_history_form_alter(&$form, &$form_state, $form_id){
  if (isset($form['#node_edit_form']) && $form['#node_edit_form']) {
    if (isset($form['field_inventory_operator_history'])) {
      $form['html_markup'] = array(
        '#markup' =>
            views_embed_view('inventory_item_operator_actions','block_1'),
        '#weight' => 6
      );
    }
  }
}

function inventory_item_operator_history_node_update($node) {
  inventory_item_operator_history_node_post_save($node);
}

function inventory_item_operator_history_node_insert($node) {
  inventory_item_operator_history_node_post_save($node);
}

function inventory_item_operator_history_node_delete($node) {
  inventory_item_operator_history_node_post_save($node, TRUE);
}

function inventory_item_operator_history_node_post_save($inventory_item,
							$deleting = FALSE) {
  $item_status_field_name = variable_get('reservable_item_status_field_name', 'field_reservable_item_status');

  if (!isset($inventory_item->{$item_status_field_name})) {
    return;
  }

  //fetch new status
  if ($deleting) {
    $new_status = 0;
  }
  else {
    $new_status =
      inventory_item_operator_get_single_field_value($inventory_item, $item_status_field_name,'tid');
    $new_status = $new_status ? $new_status : 0;
    $notes =
      inventory_item_operator_get_single_field_value($inventory_item,
					    'field_reservable_condition_notes',
						     'value');
    $inventory_item->field_reservable_condition_notes[LANGUAGE_NONE][0]
      ['value'] = '';
    field_attach_update('node', $inventory_item);
  }


  //fetch old status

  $old_inventory_item = $inventory_item->original;
  $old_status =
    inventory_item_operator_get_single_field_value($old_inventory_item, $item_status_field_name,'tid');
  $old_status = $old_status ? $old_status : 0;



  global $user;

  $logged_in_user = $user;

  //call alter hook
  drupal_alter('inventory_item_operator_history_user', $logged_in_user,
  	       $inventory_item);

  $sql =
    "INSERT INTO inventory_item_operator_history
     (uid, inventory_item_id, beginning_status, end_status, timestamp, notes)
     VALUES
     (:uid, :inventory_item_id, :beginning_status, :end_status, :timestamp,
      :notes)";

  $args = array(':uid' => $logged_in_user->uid,
		':inventory_item_id' => $inventory_item->nid,
		':beginning_status' => $old_status,
		':end_status' => $new_status,
		':timestamp' => strtotime('now'),
		':notes' => $notes);
  db_query($sql, $args);
}

function inventory_item_operator_history_views_data() {

  // The 'group' index will be used as a prefix in the UI for any of this
  // table's fields, sort criteria, etc. so it's easy to tell where they came
  // from.
  $data['inventory_item_operator_history']['table']['group'] =
    t('Inventory Items Operator History');

  // Define this as a base table â€“ a table that can be described in itself by
  // views (and not just being brought in as a relationship). In reality this
  // is not very useful for this table, as it isn't really a distinct object of
  // its own, but it makes a good example.
  $data['inventory_item_operator_history']['table']['base'] =
    array(
	  'field' => 'id', // This is the identifier field for the view.
	  'title' => t('Inventory Items Operator History'),
	  'help' => t('Inventory Items Operator History keeps the history of '.
		      'status changes to inventory items by operators.'),
	  'weight' => -10,
	  );

  // This table references the {node} table. The declaration below creates an
  // 'implicit' relationship to the node table, so that when 'node' is the base
  // table, the fields are automatically available.
  $data['inventory_item_operator_history']['table']['join'] =
    array(
	  // Index this array by the table name to which this table refers.
	  // 'left_field' is the primary key in the referenced table.
	  // 'field' is the foreign key in this table.
	  'node' => array(
			  'left_field' => 'nid',
			  'field' => 'inventory_item_id',
			  ),
	  );

  // Next, describe each of the individual fields in this table to Views.
  // Node ID table field.
  $data['inventory_item_operator_history']['id'] =
    array(
	  'title' => t('ID'),
	  'help' => t('The primary key of the table'),
	  'field' => array(
			   'handler' => 'views_handler_field_numeric',
			   'click sortable' => TRUE,
			   ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_numeric',
			    ),
	  'sort' => array(
			  'handler' => 'views_handler_sort',
			  ),

	  );
  $data['inventory_item_operator_history']['uid'] =
    array(
	  'title' => t('UID'),
	  'help' => t('The UID of the operator editing the inventory item.'),
	  'field' => array(
			   'handler' => 'views_handler_field_numeric',
			   'click sortable' => TRUE,
			   ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_numeric',
			    ),
	  'sort' => array(
			  'handler' => 'views_handler_sort',
			  ),

	  );
  $data['inventory_item_operator_history']['inventory_item_id'] =
    array(
	  'title' => t('Inventory Item nid'),
	  'help' => t('The Inventory Item NID.'),
	  'field' => array(
			   'handler' => 'views_handler_field_node',
			   'click sortable' => TRUE,
			   ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_numeric',
			    ),
	  'sort' => array(
			  'handler' => 'views_handler_sort',
			  ),
	  'relationship' =>
	  array(
		'base' => 'node', // The name of the table to join with.
		'base field' => 'nid', //name of the field on the joined table.
		'handler' => 'views_handler_relationship',
		'label' => t('Operatory History Inventory Item Relationship'),
		'title' => t('Operatory History Inventory Item Relationship'),
		'description' => t('The inventory item operator history.'),
		),

	  );
  $data['inventory_item_operator_history']['beginning_status'] =
    array(
	  'title' => t('Beginning Inventory Item Status'),
	  'help' => t('Beginning Inventory Item Status'),
	  'field' => array(
			   'handler' => 'views_handler_field_numeric',
			   'click sortable' => FALSE,
			   ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_numeric',
			    ),
	  'sort' => array(
			  'handler' => 'views_handler_sort',
			  ),
	  );
  $data['inventory_item_operator_history']['end_status'] =
    array(
	  'title' => t('End Inventory Item Status'),
	  'help' => t('End Inventory Item Status'),
	  'field' => array(
			   'handler' => 'views_handler_field_numeric',
			   'click sortable' => FALSE,
			   ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_numeric',
			    ),
	  'sort' => array(
			  'handler' => 'views_handler_sort',
			  ),
	  );
  // Example timestamp field.
  $data['inventory_item_operator_history']['timestamp'] =
    array(
	  'title' => t('Timestamp'),
	  'help' => t('Timestamp'),
	  'field' => array(
			   'handler' => 'views_handler_field_date',
			   'click sortable' => TRUE,
			   ),
	  'sort' => array(
			  'handler' => 'views_handler_sort_date',
			  ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_date',
			    ),
	  );

  $data['inventory_item_operator_history']['notes'] =
    array(
	  'title' => t('Notes'),
	  'help' => t('Inventory Items Operator History Notes'),
	  'field' => array(
			   'handler' => 'views_handler_field_markup',
			   'click sortable' => FALSE,
			   ),
	  'sort' => array(
			  'handler' => 'views_handler_sort',
			  ),
	  'filter' => array(
			    'handler' => 'views_handler_filter_string',
			    ),
	  );

  return $data;
}

function inventory_item_operator_history_inventory_item_field($row) {
  $node = node_load($row->inventory_item_id);
  $link = l($node->title, "node/" . $row->inventory_item_id);
  return $link;
}

function inventory_item_operator_history_operator_field($row) {
  $user = user_load($row->uid);
  $link = l($user->realname, 'user/'.$row->uid);
  return $link;
}


function inventory_item_operator_history_status_field($row, $type) {
  if ($type == 'beginning') {
    $status = $row->beginning_status;
  }
  else if ($type == 'ending') {
    $status = $row->end_status;
  }
  $term = taxonomy_term_load($status);
  $status = $term->name;
  if ($type == 'ending' && $row->notes) {
    $status .= ' ('. $row->notes . ')';
  }
  return $status;
}


/**
 * Helper function to get a single value off of a entity
 */
function inventory_item_operator_get_single_field_value($entity, $field_name,
							$index = 'value') {
  if (isset($entity->{$field_name})) {
    $field = $entity->{$field_name};
    if (isset($field[LANGUAGE_NONE]) &&
	isset($field[LANGUAGE_NONE][0]) &&
	isset($field[LANGUAGE_NONE][0][$index])) {
      return $field[LANGUAGE_NONE][0][$index];
    }
  }
  return NULL;
}
