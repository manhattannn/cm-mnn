<?php

/**
 * @file
 * reservations_ui functions
 +---------------------------------------------------------------------------+
 | Copyright (C) 2009 Openflows, Inc. + Blue Bag. All rights reserved.       |
 | Additionally, Kevin Reynen                                                |
 | This work is published under the GNU AGPLv3 license without any           |
 | warranty. For full license and copyright information, see                 |
 | https://www.gnu.org/licenses/agpl-3.0.html                                |
 +---------------------------------------------------------------------------+
 */

/**
 * Implements hook_views_api().
 */
function reservations_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'reservations_ui'),
  );
}

/**
 * Implements hook_preprocess_views_view().
 */
function reservations_ui_preprocess_views_view(&$variables) {
  if (isset($variables['name'])) {
    if ($variables['name'] == 'reservations_ui_user_reservations' or $variables['name'] == 'reservations_ui_node_reservations') {
      $output = '<div id="make-reservations-reservation">';
      $output .= l(t('Make a Reservation'), 'node/add/reservations-reservation');
      $output .= '</div>';
      $variables['footer'] .= $output;
    }
  }
}

/**
 * Implements hook_menu().
 */
function reservations_ui_menu() {
  $items = array();


  // Configuration.
  $items['admin/reservations'] = array(
    'title' => 'Reservations',
    'description' => 'Reservations.',
    'page callback' => 'reservations_ui_management_page',
    'access arguments' => array('manage reservations'),
  );

  // Adds Block of Menu Options
  $items['admin/reservations/manage'] = array(
      'title' => 'Manage Reservations',
      'description' => 'Adds Menu options',
      'position' => 'left',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('manage reservations'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'weight' => -99,
  );

  // Standard Administration settings.
  $items['admin/config/reservations/ui'] = array(
    'title' => 'UI Options',
    'description' => 'Configuration options for the Reservations UI.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_ui_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reservations/manage/add'] = array(
    'title' => 'Make Reservation',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/reservations-reservation'),
    'access arguments' => array('manage reservations'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -50,
  );

  $items['admin/reservations/manage/current_inventory'] = array(
    'title' => 'Current Inventory',
    'description' => 'List Reservable Content Types with the number On Hand, Checked Out, Temporarily Unavailable, ',

    // Original code - did not properly work.
    //    'page callback' => 'theme',
    //    'page arguments' => array('reservations_ui_current_inventory'),

    // Fixed code - but with confusing overhead.
    //    'page callback' => 'theme',
    //    'page arguments' => array('reservations_ui_current_inventory', array()),

    // Best way - but we should:
    // @todo - rename the file to includes/current_inventory.inc
    'page callback' => 'theme_reservations_ui_current_inventory',
    'file' => 'theme.inc',
    'file path' => drupal_get_path('module', 'reservations_ui') . '/theme',
    'access arguments' => array('manage reservations'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function reservations_ui_admin_settings($form, &$form_state) {

  $form['reservations_ui_hide_content_types'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Reservable Content Types in Standard Structure -> Content Types and Node Add lists'),
    '#default_value' => variable_get('reservations_ui_hide_content_types', 0),
    '#description' => t(''),
  );

  $form['reservations_ui_inventory_active_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude inactive reservable content types?'),
    '#default_value' => variable_get('reservations_ui_inventory_active_status', 0),
    '#description' => t(''),
  );

  $form['reservations_ui_inventory_description'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include the descriptions for the reservable content types?'),
    '#default_value' => variable_get('reservations_ui_inventory_description', 0),
    '#description' => t(''),
  );

  $form['reservation_items_scroll_size'] = array(
    '#type' => 'textfield',
    '#title' => t('How many pixels high should reservation items scroll bar be?'),
    '#default_value' => variable_get('reservation_items_scroll_size', 500),
    '#description' => t(''),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function reservations_ui_theme() {
  return array(
    'reservations_ui_current_inventory' => array(
      'path' => drupal_get_path('module', 'reservations_ui') . '/theme',
      'file' => 'theme.inc',
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservations_ui_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-reservations-ui-node-res-default') {
    $form['#action'] = '/node/' . arg(1) . '/manage-reservations';
  }
}

/**
 * Menu callback; Provide the administration overview page.
 */
function reservations_ui_management_page() {

  $blocks = array();
  if ($admin = db_query("SELECT menu_name, mlid FROM {menu_links} WHERE link_path = 'admin/reservations'")->fetchAssoc()) {
    $result = db_query("
      SELECT m.*, ml.*
      FROM {menu_links} ml
      INNER JOIN {menu_router} m ON ml.router_path = m.path
      WHERE ml.link_path <> 'admin/help' AND menu_name = :menu_name AND ml.plid = :mlid AND hidden = 0", $admin, array('fetch' => PDO::FETCH_ASSOC));
    foreach ($result as $item) {
      _menu_link_translate($item);
      if (!$item['access']) {
        continue;
      }
      // The link description, either derived from 'description' in hook_menu()
      // or customized via menu module is used as title attribute.
      if (!empty($item['localized_options']['attributes']['title'])) {
        $item['description'] = $item['localized_options']['attributes']['title'];
        unset($item['localized_options']['attributes']['title']);
      }
      $block = $item;
      $block['content'] = '';
      $block['content'] .= theme('admin_block_content', array('content' => system_admin_menu_block($item)));
      if (!empty($block['content'])) {
        $block['show'] = TRUE;
      }

      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $blocks[(50000 + $item['weight']) . ' ' . $item['title'] . ' ' . $item['mlid']] = $block;
    }
  }
  if ($blocks) {
    ksort($blocks);
    return theme('admin_page', array('blocks' => $blocks));
  }
  else {
    return t('You do not have any administrative items.');
  }
}

/**
 * Implements hook_form_alter().
 */
function reservations_ui_form_alter(&$form, $form_state, $form_id) {
  //dsm($form);
}

/**
 * Implements hook_menu_local_tasks_alter()
 *
 * Only want the reservations view tab to appear on reservable nodes
 */
function reservations_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // make sure the reservations module is enabled
  if (module_exists('reservations') == FALSE) return;

  //get an array of all the nonreservable content types and see if this one
  $nonreservable_types = reservations_ui_nonreservable_content_types();

  // determine if this is a nonreservable content type
  $type = NULL;
	foreach ($router_item["map"] as $map) {
		if (!isset($map->type)) continue;
		if (in_array($map->type, $nonreservable_types)) {
			$type = $map->type;
			break;
		}
	}
  if ($type == NULL) return;

  // nonreservable so unset the reservations tab
	foreach ($data['tabs'][0]['output'] as $key => $value) {
		if ($value['#link']['path'] == 'node/%/reservations-list') {
			unset($data['tabs'][0]['output'][$key]);
		}
	}
}

/**
 * Return a list of all nonreservable content types.
 *
 * @return
 *    returns an associative array of nonreservable content types
 */
function reservations_ui_nonreservable_content_types() {

  // query for all content types that are nonreservable
  $sql = "
    SELECT mt.type
      FROM {reservations_node_type} mt
        INNER JOIN {node_type} nt
          ON mt.type = nt.type
      WHERE reservations_type_setting = :reservations_type_setting
  ";

  $nonreservable_types = db_query($sql, array(
    ':reservations_type_setting' => 'disabled'
  ));

  foreach ($nonreservable_types  as $type_name) {
    $types[] = $type_name->type;
  }

  return $types;
}
