<?php

/**
 * Implements hook_menu().
 */
function mnn_internet_archive_menu() {
  $items['admin/config/internet_archive/mnn_metadata'] = array(
    'title' => 'MNN Metadata Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mnn_internet_archive_admin_form'),
    'access arguments' => array('administer internet_archive'),
    'weight' => 17,
  );
  $items['archive/file_status'] =
    array(
	  'title' => 'Archive.org File Status',
	  'access callback' => TRUE,
	  'page callback' => 'mnn_internet_archive_file_status_json',
	  'menu_name' => 'archive_file_status',
	  'type' => MENU_CALLBACK,
	  );

  return $items;
}

/**
 * Form builder for the internet archive MNN metadata site settings form.
 *
 * @ingroup forms
 */
function mnn_internet_archive_admin_form($form, &$form_state) {
  $form['header'] = array(
			  '#markup' =>
			  "No settings at this time, just a place holder",
			  );
			 
  return system_settings_form($form);
}

/**
 * Implements hook_internet_archive_metadata().
 */
function mnn_internet_archive_internet_archive_metadata($node = NULL,
							$file_name) {
  $metadata = array();

  //grab all the cm_show specific metadata fields
  if ($node && $node->type == 'cm_show') {
    $public_title =
      mnn_internet_archive_get_single_field_value($node,
						  'field_show_public_title');

    $short_description =
      mnn_internet_archive_get_single_field_value($node,
						  'field_short_description');

    if ($public_title) {
      $title = $public_title;
    }
    else if ($short_description) {
      $title = $short_description;
    }
    else {
      $title = $node->title;
    }

    $metadata['title'] = $title;
    
    if (isset($node->body)) {
      $metadata['description'] = $node->body;
    }
    else {
      $narrative =
	mnn_internet_archive_get_single_field_value($node,
						    'field_narrative',
						    'value');
      
      if ($narrative) {
	$metadata['description'] = $narrative;
      }
      else {

	if ($short_desc) {
	  $metadata['description'] = $short_description;
	}
      }
    }
    $metadata['date'] = date("Y-m-d", $node->created);

    $premiere_date =
      mnn_internet_archive_get_single_field_value($node,
						  'field_show_premiere_date');
    if ($premiere_date) {
      $metadata['premiere-date'] = $premiere_date;
    }
    //find project
    $project_id = mnn_internet_archive_get_single_field_value($node,
							      'og_node2',
							      'target_id');
    if ($project_id) {
      $project = node_load($project_id);
      $producer =
	mnn_internet_archive_get_display_name($project->uid);

      $metadata['creator'] = $producer;
      $metadata['project'] = $project->title;

      $episode_number =
	mnn_internet_archive_get_single_field_value($node,
						    'field_episode_number',
						    'value');
      if ($episode_number) {
	$bucket_name = 'mnn_'. $project_id . '_' . $episode_number;
	$bucket_name = internet_archive_create_item_name($bucket_name);
	$metadata['bucket-name'] = $bucket_name;
	$metadata['mnn-house-id'] = $bucket_name;
      }
    }

    $genre_tid =
      mnn_internet_archive_get_single_field_value($node,
						  'field_pbcore_genres',
						  'tid');

    if ($genre_tid) {
      $genre = taxonomy_term_load($genre_tid);
      if ($genre) {
	//here we set the pbcore_genre custom field, as well as the subject
	//pbcore_genre gives us more consistant control over pulling content by
	//genre. Subject enables people to browse by genre on archive.org
	$metadata['pbcore-genre'] = $genre->name;
	$metadata['subject'] = $genre->name;
      }
    }
    
    $fcc_rating_tid =
      mnn_internet_archive_get_single_field_value($node,
						  'field_pbcore_fcc_ratings',
						  'tid');

    if ($fcc_rating_tid) {
      $fcc_rating = taxonomy_term_load($fcc_rating_tid);
      if ($fcc_rating) {
	$metadata['tv-parental-guidelines'] = $fcc_rating->name;
      }
    }

    $language_tid =
      mnn_internet_archive_get_single_field_value($node,
						  'field_pbcore_languages',
						  'tid');

    if ($language_tid) {
      $language = taxonomy_term_load($language_tid);
      if ($language) {
	$metadata['language'] = $language->name;
      }
    }

    $neighborhood_tid =
      mnn_internet_archive_get_single_field_value($node,
						  'field_show_neighborhood',
						  'tid');
    
    if ($neighborhood_tid) {
      $neighborhood = taxonomy_term_load($neighborhood_tid);
      if ($neighborhood) {
	$metadata['neighborhood'] = $neighborhood->name;
      }
    }

    $theme_tid =mnn_internet_archive_get_single_field_value($node,
							    'field_show_theme',
							    'tid');

    if ($theme_tid) {
      $theme = taxonomy_term_load($theme_tid);
      if ($theme) {
	$metadata['theme'] = $theme->name;
      }
    }

    $metadata['licenseurl'] ='https://creativecommons.org/licenses/by-sa/4.0/';
  }

  $data = array($metadata);
  return $data;
}

/**
 * Implements hook_internet_archive().
 */
function mnn_internet_archive_internet_archive(&$archive_data, $op) {

}

/**                                                                            
 * Helper function to get a single value off of a entity  
*/
function mnn_internet_archive_get_single_field_value($entity,
							      $field_name,
							      $index='value') {
  if (isset($entity->{$field_name})) {
    $field = $entity->{$field_name};
    if (isset($field[LANGUAGE_NONE]) &&
        isset($field[LANGUAGE_NONE][0]) &&
        isset($field[LANGUAGE_NONE][0][$index])) {
      return $field[LANGUAGE_NONE][0][$index];
    }
  }
  return NULL;
}

/**
  * Get the the display name of the contact of the contact
  */
function mnn_internet_archive_get_display_name($uid) {

  $cid = cm_crew_connect_get_cid($uid);

  if ($cid) {
    civicrm_initialize();
    
    $result = civicrm_api3('Contact', 'get', array(
						   'sequential' => 1,
						   'id' => $cid,
						   ));

    $display_name = (isset($result) && isset($result['values']) && 
		     isset($result['values'][0])) ? 
      $result['values'][0]['display_name'] : NULL;
      
    return $display_name;
  }
  return "";
}

/**
 * Implements hook_views_api().
 * @return Array with Views API version.
 */
function mnn_internet_archive_views_api() {
  return array(
	       'api' => 3,
	       'path' => 
	       drupal_get_path('module', 
			       'mnn_internet_archive').'/includes'
	       );
}

/**
 * Implements hook_internet_archive_process_remote_files()
 *
 */
function mnn_internet_archive_internet_archive_process_remote($files){
  //add thumbnails to thumbless shows
  mnn_internet_archive_process_thumbs();
  
  foreach($files as $file) {
    $pathinfo = pathinfo($file);
    $name = $pathinfo['filename'];

    //adding back originl code from before 10/28/2018 - Mark Libkuman 2/20/2019
    if ($pathinfo['extension'] == 'mp4')  {
      continue;
    }

    //ignoring thumb images
    if ($pathinfo['extension'] == 'jpg' ||
	$pathinfo['extension'] == 'JPG')  {
      continue;
    }
    
    $parts = explode('_', $name);
    if ($parts[0] == 'mnn') {
      $project_id = $parts[1];
      $episode_number = $parts[2];
    }
    else {
      $project_id = $parts[0];
      $episode_number = $parts[1];
    }

    //adding back originl code from before 10/28/2018 - Mark Libkuman 2/20/2019
    $episode_number = str_replace('.HD', '', $episode_number);
    if (ctype_digit($project_id) && ctype_digit($episode_number)) {
      $project = node_load($project_id);
      $field = 'field_internet_archive_opt_in';
      $opt_in = mnn_internet_archive_get_single_field_value($project, $field);
      if ($opt_in) {
	$show_nid =
	  mnn_show_get_existing_show_for_episode_number($project_id,
							NULL,
							$episode_number);
	if ($show_nid) {
	  $show = node_load($show_nid);
	  
	  if ($show) {
	    $name = 'field_internet_archive_remote';
	    $value =
	      mnn_internet_archive_get_single_field_value($show,
							  $name);
	    if (!$value) {
	      $show->field_internet_archive_remote[LANGUAGE_NONE][0]['value'] =
		$file;
	      node_save($show);
	    }
	  }
	}
      }
    }	
  }
}
/**
 * Function will grab all the thumbs from the qnap files directory
 */
function mnn_internet_archive_process_thumbs() {
  //build url to the files directory
  $prefix = variable_get('internet_archive_remote_prefix', FALSE);
  $remote_url = variable_get('internet_archive_server_url', FALSE);
  if (!$remote_url) {
    return;
  }
  
  $url_parts = parse_url($remote_url);
  $remote_file_directory_url = "http://" . $url_parts['host'] . '/' . $prefix;

  //grab all file names from directory
  $html = file_get_contents($remote_file_directory_url);
  //parse the html
  $count = preg_match_all('/<a href=\"([^\"]*)\">(.*)<\/a>/iU',
			  $html, $files);

  //iterate over all the files, trying to find images
  for ($i = 0; $i < $count; ++$i) {

    $file = $files[1][$i];
    if (ctype_alnum(substr($file, 0, 1))) {
      $pathinfo = pathinfo($file);
      if ($pathinfo['extension'] == 'jpg' || 
	  $pathinfo['extension'] == 'png' ||
	  $pathinfo['extension'] == 'jpeg')  {
	$image =
	  file_get_contents($remote_file_directory_url . '/' . $file);

	$name = $pathinfo['filename'];

	$parts = explode('_', $name);
	if ($parts[0] == 'mnn') {
	  $project_id = $parts[1];
	  $episode_number = $parts[2];
	}
	else {
	  $project_id = $parts[0];
	  $episode_number = $parts[1];
	}

	if (ctype_digit($project_id) && ctype_digit($episode_number)) {
	  $project = node_load($project_id);
	  $show_nid =
	    mnn_show_get_existing_show_for_episode_number($project_id,
							  NULL,
							  $episode_number);
	  if ($show_nid) {
	    $show = node_load($show_nid);
	    $field_name = 'field_internet_archive_thumb';
	    $thumb_field =
	      mnn_internet_archive_get_single_field_value($show,
							  $field_name,
							  'fid');
	    if (!$thumb_field) {
	      $new_file = file_save_data($image, 'public://archive_thumbs/' .
					 $file, FILE_EXISTS_RENAME);
	      $new_file->display = 1;
	      $show->field_internet_archive_thumb[LANGUAGE_NONE][0] =
		(array)$new_file;
	      node_save($show);
	    }
	  }
	}
      }
    }
  }
}

  

/**
 * Function providing json via http API calls
 */
function mnn_internet_archive_file_status_json() {
  $status =
    mnn_internet_archive_file_status_value(filter_input(INPUT_GET, 'file'));
  $data = array('status' => $status);
  drupal_json_output($data);
  drupal_exit();
					 
}

/**
 * FUNCTION RETURNS A STATUS FOR A FILE'S UPLOAD ON ARCHIVE.ORG 
 */
function mnn_internet_archive_file_status_value($file) {

  if (!$file) {
    return 1;
  }
    
  $statuses = array(
		    "error" => 1,
		    "no-project" => 2,
		    "failed" => 3,
		    "ineligible" => 4,
		    "bad-file-name" => 5,
		    "initial" => 6,
		    "queued" => 7,
		    "uploaded" => 8,
		    );
    
  foreach($statuses as $test_status=>$key) {
    if ($file == "test-$test_status" . ".mov") {
      return $statuses[$test_status];
    }
  }

  //AS OF RIGHT NOW, THE LOG FILE IS IN THE SAME DIRECTORY AS THE FILES
  //SO WE WILL PASS BACK 'queued' AS WE DON'T WANT THE FILE DELETED
  if ($file == 'archive_status.log') {
    return $statuses['initial'];
  }
  //look up file name from internet archive table
  $data = internet_archive_load_data($file,NULL);
  $local_status = $data['status'];
  $attempts = $data['attempts'];
  
  if ($data) {
    //find internet archive status and pass on for api result    
    if ($local_status == ARCHIVE_QUEUED ||
	$local_status == ARCHIVE_TRANSFERRING ||
	$local_status == ARCHIVE_TRANSFERRED ||
	$local_status == ARCHIVE_VALIDATED ) {
      $return_status = 'queued';
    }
    else if ($local_status ==  ARCHIVE_DERIVED) {
      $return_status = 'uploaded';
    }
    else if ($local_status == ARCHIVE_DELETED){
      $return_status = 'ineligible';
    }
    else if ($local_status == ARCHIVE_FAILED &&
	     $attempts >= variable_get('internet_archive_queue_attempts', 0)) {
      //$return_status = 'failed';
      //changing return value so that we don't delete file
      $return_status = 'queued';

    }
    else if ($local_status == ARCHIVE_FAILED) {
      $return_status = 'queued';
    }
  }

  //WE DON'T HAVE ANY ARCHIVE RECORD YET
  if (!$return_status) {
    $no_extension = pathinfo($file, PATHINFO_FILENAME);
    $no_extension = str_replace('.HD', '', $no_extension);
    $parts = explode('_', $no_extension);

    if ($parts[0] == 'mnn') {
      $project_id = $parts[1];
      $episode_number = $parts[2];
    }
    else {
      $project_id = $parts[0];
      $episode_number = $parts[1];
    }
    if (!ctype_digit($episode_number)) {
      $return_status = 'bad-file-name';
    }
    else if (ctype_digit($project_id)) {
      $project = node_load($project_id);
      if ($project) {
	$field = 'field_internet_archive_opt_in';
	$opt_in =mnn_internet_archive_get_single_field_value($project, $field);
	//we have a project and we aren't opting in
	if ($opt_in != 1) {
	  $return_status = 'ineligible';
	}
	//we have a project, so just waiting for either the show to be created
	//or waiting for the show's file to be harvested
	else {
	  $return_status = 'initial';
	}
      }
    }
    else {
      $return_status = 'bad-file-name';
    }
  }
  if (!$return_status) {
    $return_status = 'no-project';
  }

  return $statuses[$return_status];
}
